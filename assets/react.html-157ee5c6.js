import{_ as t,r as e,o,c,d as s,e as n,b as l,a}from"./app-1631cab8.js";const i={},u=a(`<h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>闭包的应用场景防抖与节流<br> 防抖:当持续触发某种事件时，一定时间没有执行该事件，处理函数才会调用。<br> 节流：当持续触发某种事件时，在一定时间范围内，限定执行处理函数的次数。</p><h3 id="闭包的作用有两种" tabindex="-1"><a class="header-anchor" href="#闭包的作用有两种" aria-hidden="true">#</a> 闭包的作用有两种：</h3><p>将函数需要用到的变量在函数作用域内声明，避免全局污染<br> 将函数内部的变量给外部作用域开放一个访问渠道(将变量设置为私有变量)</p><h3 id="闭包的优点" tabindex="-1"><a class="header-anchor" href="#闭包的优点" aria-hidden="true">#</a> 闭包的优点：</h3><p>1.可以读取函数内部的变量。</p><p>2.让局部变量始终保存到内存中。</p><h3 id="闭包的缺点" tabindex="-1"><a class="header-anchor" href="#闭包的缺点" aria-hidden="true">#</a> 闭包的缺点：</h3><p>和它的优点一样，有时候常驻内存是好事，但是也是坏事。在早期计算机内存很小，如果出现太多的常驻内存变量就导致内存泄漏，怎样解决这个问题呢？只需要在使用过这个变量之后给它赋值null就可以将内存释放掉。</p><h3 id="es6新特性" tabindex="-1"><a class="header-anchor" href="#es6新特性" aria-hidden="true">#</a> Es6新特性</h3><p>1.let和const</p><p>2.symbol</p><p>3.字符串新方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>判断字符串是否包含参数字符串，返回boolean值。
<span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，判断字符串是否以参数字符串开头或结尾。返回boolean值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置。

<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;blue,red,orange,white&#39;</span><span class="token punctuation">;</span>

str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.<code>repeat()</code>方法按指定次数返回一个新的字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//&#39;hellohello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.对象解构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> 
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ren&quot;</span><span class="token punctuation">,</span> 
	<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> 
	<span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;ren&#39; 12 &#39;male&#39;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> myName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> myAge<span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> mySex <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//自定义变量名</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">,</span> myAge<span class="token punctuation">,</span> mySex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#39;ren&#39; 12 &#39;male&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>Map和Set</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Map和Set属于es6新增加的对象
<span class="token number">1</span><span class="token punctuation">.</span>Map对象用于保存键值对，任何值JavaScript支持的值都可以作为一个键（key）或者一个值（value）。
与对象不同的是
<span class="token keyword">let</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;ren&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{&#39;name&#39;=&gt;&#39;ren&#39;,&#39;age&#39;=&gt;12}</span>

myMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{&#39;name&#39;=&gt;&#39;ren&#39;,&#39;age&#39;=&gt;12,&#39;sex&#39;=&gt;&#39;male&#39;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3</span>

myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//&#39;ren&#39;</span>
myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
myMap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
myMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined</span>



<span class="token number">2</span><span class="token punctuation">.</span>Set对象和Map对象类似，但它存储不是键值对。类似数组，但它的每个元素都是唯一的。
<span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//里面要传一个数组，否则会报错</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1,2,3}</span>

mySet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1,2,3,4}</span>

mySet<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
mySet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{2,3,4}</span>

利用Set对象唯一性的特点，可以轻松实现数组的去重
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[1,2,3,4]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7.数组的新方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法可以将可迭代对象转换为新的数组。
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 4, 6]</span>

<span class="token function">includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>是查看数组中是否存在这个元素，存在就返回<span class="token boolean">true</span><span class="token punctuation">,</span>不存在就返回<span class="token boolean">false</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> ary <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary<span class="token punctuation">)</span>


<span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>要利用原数组经过运算后的数组，或者从对象数组中拿某个属性
<span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>是将符合挑选的筛选出来成为一个新数组，新数组不会影响旧数组。
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> newarr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//newarr1-------[33, 44]</span>
	<span class="token keyword">let</span> newarr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//newarr2-------[1, 33, 44, 2, 6, 9]</span>

	<span class="token keyword">let</span> newarr3 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//newarr3-------[false, true, true, false, false, false]</span>
	<span class="token keyword">let</span> newarr4 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//newarr4-------  [2, 66, 88, 4, 12, 18]</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>


<span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>找到一个符合条件的就返回<span class="token boolean">true</span><span class="token punctuation">,</span>所有都不符合返回<span class="token boolean">false</span>。
<span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>数组所有值都符合条件才会返回<span class="token boolean">true</span><span class="token punctuation">,</span>有一个不符合返回<span class="token boolean">false</span>。
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> newarr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr<span class="token punctuation">)</span> <span class="token comment">//true</span>

<span class="token keyword">let</span> newarr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> v <span class="token operator">&gt;</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newarr2<span class="token punctuation">)</span> <span class="token comment">//false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li><p>object的新方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>在 <span class="token constant">ES6</span> 中，添加了Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>、Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span>等方法。


Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回对象所有属性
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回对象所有属性值
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回多个数组，每个数组是 key–value
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
		<span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ &#39;name&#39;, &#39;age&#39;, &#39;language&#39; ]</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[ &#39;admin&#39;, 12, [ &#39;java&#39;, &#39;js&#39;, &#39;css&#39; ] ]</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* [
	                                                     [&quot;name&quot;, &quot;admin&quot;],
	                                                     [&quot;age&quot;, 12],
	                                                     [&quot;language&quot;, [&quot;java&quot;, &quot;js&quot;, &quot;css&quot;]],
	                                                 ]; */</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9.…(对象扩展符) ===&gt; 深拷贝</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token keyword">let</span> person<span class="token operator">=</span><span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
		<span class="token literal-property property">wife</span><span class="token operator">:</span><span class="token string">&quot;迪丽热巴&quot;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">let</span> person2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>person<span class="token punctuation">}</span>
	
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token operator">===</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{name: &#39;admin&#39;, age: 12, wife: &quot;迪丽热巴&quot;}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

例子<span class="token number">1</span>
<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;2-edited&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 1, b: 2}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  {a: 1, b: &quot;2-edited&quot;}</span>

上面这个例子扩展运算符拷贝的对象是基础数据类型，因此对obj2的修改并不会影响obj1，如果改成这样：

<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>c<span class="token punctuation">.</span>nickName <span class="token operator">=</span> <span class="token string">&#39;d-edited&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 1, b: 2, c: {nickName: &#39;d-edited&#39;}}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {a: 1, b: 2, c: {nickName: &#39;d-edited&#39;}}</span>
这里可以看到，对obj2的修改影响到了被拷贝对象obj1，原因上面已经说了，因为obj1中的对象c是一个引用数据类型，拷贝的时候拷贝的是对象的引用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10.箭头函数</p><p>箭头函数实现了一种更加简洁的书写方式。箭头函数内部没有<code>arguments</code>，也没有<code>prototype</code>属性，所以不能用<code>new</code>关键字调用箭头函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>
<span class="token comment">//当只有一个参数时，括号可以省略，函数体只有单行return语句时，大括号也可以省略。</span>
箭头函数和普通函数最大的区别在于其内部<span class="token keyword">this</span>永远指向其父级对象的<span class="token keyword">this</span><span class="token function">。</span><span class="token punctuation">(</span>重点<span class="token punctuation">)</span>
 <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">456</span><span class="token punctuation">,</span>
     <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this指向window</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//123</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>11.可选链 <code>?.</code></p><p>12.应用场景</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>防抖：

<span class="token number">1</span><span class="token punctuation">.</span>search搜索联想，用户在不断输入值时，用防抖来节约请求资源
<span class="token number">2</span><span class="token punctuation">.</span>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次
节流：

<span class="token number">1.</span><span class="token function">鼠标不断点击触发，mousedown</span><span class="token punctuation">(</span>单位时间内只触发一次<span class="token punctuation">)</span>
<span class="token number">2.</span>监听滚动事件，比如是否滑到底部自动加载更多

防抖和节流相同点：
<span class="token number">1.</span>防抖和节流都是为了阻止操作高频触发，从而浪费性能。

防抖和节流区别：
<span class="token number">1.</span>防抖是触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。适用于可以多次触发但触发只生效最后一次的场景
<span class="token number">2.</span>节流是高频事件触发，但在n秒内只会执行一次，如果n秒内触发多次函数，只有一次生效，节流会稀释函数的执行频率。


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="在浏览器输入url后回车-经历了哪些过程" tabindex="-1"><a class="header-anchor" href="#在浏览器输入url后回车-经历了哪些过程" aria-hidden="true">#</a> 在浏览器输入URL后回车，经历了哪些过程？</h3>`,24),r={href:"https://so.csdn.net/so/search?q=%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},k=s("br",null,null,-1),d=s("br",null,null,-1),v=s("br",null,null,-1),m=s("br",null,null,-1),b=s("br",null,null,-1),g=s("br",null,null,-1),y=s("br",null,null,-1),f=a(`<p>bind、call、apply的作用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
        
调用fn<span class="token punctuation">.</span>call时会将fn中的<span class="token keyword">this</span>指向修改为传入的第一个参数thisArg；将后面的参数传入给fn<span class="token punctuation">,</span>并立即执行函数fn。        
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
        <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">job<span class="token punctuation">,</span> hobby</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁。我的工作是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>job<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，我的爱好是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hobby<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;程序员&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;看美女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我叫xiaoming,今年24岁。我的工作是: 程序员，我的爱好是: 看美女。</span>


    <span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// obj1.sayHello(); // Uncaught TypeError: obj1.sayHello is not a function</span>
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;设计师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;画画&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我叫lihua,今年30岁。我的工作是: 设计师，我的爱好是: 画画。</span>


<span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArr<span class="token punctuation">]</span><span class="token punctuation">)</span>
fn<span class="token punctuation">.</span>apply的作用和call相同：修改<span class="token keyword">this</span>指向，并立即执行fn。区别在于传参形式不同，apply接受两个参数，第一个参数是要指向的<span class="token keyword">this</span>对象，第二个参数是一个数组，数组里面的元素会被展开传入fn<span class="token punctuation">,</span>作为fn的参数。
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
        <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">job<span class="token punctuation">,</span> hobby</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁。我的工作是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>job<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，我的爱好是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hobby<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;程序员&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;看美女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我叫xiaoming,今年24岁。我的工作是: 程序员，我的爱好是: 看美女。</span>


    <span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token punctuation">}</span>
    
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;设计师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;画画&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我叫lihua,今年30岁。我的工作是: 设计师，我的爱好是: 画画。</span>


<span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
fn<span class="token punctuation">.</span>bind的作用是只修改<span class="token keyword">this</span>指向，但不会立即执行fn；会返回一个修改了<span class="token keyword">this</span><span class="token literal-property property">指向后的fn。需要调用才会执行</span><span class="token operator">:</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。bind的传参和call相同。
    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
        <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">job<span class="token punctuation">,</span> hobby</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁。我的工作是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>job<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，我的爱好是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hobby<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// obj.sayHello(&#39;程序员&#39;, &#39;看美女&#39;); // 我叫xiaoming,今年24岁。我的工作是: 程序员，我的爱好是: 看美女。</span>

    <span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;lihua&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token punctuation">}</span>
    
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;设计师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;画画&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无输出结果</span>
    obj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">&#39;设计师&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;画画&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我叫lihua,今年30岁。我的工作是: 设计师，我的爱好是: 画画。</span>


bind、call、apply的区别
<span class="token number">1</span>、相同点
三个都是用于改变<span class="token keyword">this</span>指向；
接收的第一个参数都是<span class="token keyword">this</span>要指向的对象；
都可以利用后续参数传参。
<span class="token number">2</span>、不同点
call和bind传参相同，多个参数依次传入的；
apply只有两个参数，第二个参数为数组；
call和apply都是对函数进行直接调用，而bind方法不会立即调用函数，而是返回一个修改<span class="token keyword">this</span>后的函数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function h(w,j){const p=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("一、DNS的"),s("a",r,[n("域名解析"),l(p)]),k,n(" 二、建立tcp连接"),d,n(" 三、发送一个http请求"),v,n(" 四、服务器处理相关请求"),m,n(" 五、返回响应的结果"),b,n(" 六、关闭tcp连接"),g,n(" 七、浏览器解析HTML"),y,n(" 八、浏览器进行布局渲染")]),f])}const x=t(i,[["render",h],["__file","react.html.vue"]]);export{x as default};
